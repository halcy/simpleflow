#ifndef __CUBEVERTS_H__
#define __CUBEVERTS_H__

// These are vertices and normals for a cube.
// They're interleaved [array-of-struct], which isn't ideal for processing
// on the CPU, but nice to read.
// Vertices

typedef struct vertex_t {
	Vector p;
	float w;
	Vector n;
	float s, t;
} vertex;

vertex cubeVertices[] = {
	{ {  1.0,  1.0,  1.0 }, 1.0, {  0.0,  0.0,  1.0 }, 0.0, 0.0 },
	{ { -1.0,  1.0,  1.0 }, 1.0, {  0.0,  0.0,  1.0 }, 1.0, 0.0 },
	{ { -1.0, -1.0,  1.0 }, 1.0, {  0.0,  0.0,  1.0 }, 1.0, 1.0 },
	{ {  1.0, -1.0,  1.0 }, 1.0, {  0.0,  0.0,  1.0 }, 0.0, 1.0 },
	{ {  1.0,  1.0,  1.0 }, 1.0, {  1.0,  0.0,  0.0 }, 0.0, 0.0 },
	{ {  1.0, -1.0,  1.0 }, 1.0, {  1.0,  0.0,  0.0 }, 1.0, 0.0 },
	{ {  1.0, -1.0, -1.0 }, 1.0, {  1.0,  0.0,  0.0 }, 1.0, 1.0 },
	{ {  1.0,  1.0, -1.0 }, 1.0, {  1.0,  0.0,  0.0 }, 0.0, 1.0 },
	{ {  1.0,  1.0,  1.0 }, 1.0, {  0.0,  1.0,  0.0 }, 0.0, 0.0 },
	{ {  1.0,  1.0, -1.0 }, 1.0, {  0.0,  1.0,  0.0 }, 1.0, 0.0 },
	{ { -1.0,  1.0, -1.0 }, 1.0, {  0.0,  1.0,  0.0 }, 1.0, 1.0 },
	{ { -1.0,  1.0,  1.0 }, 1.0, {  0.0,  1.0,  0.0 }, 0.0, 1.0 },
	{ { -1.0,  1.0,  1.0 }, 1.0, { -1.0,  0.0,  0.0 }, 0.0, 0.0 },
	{ { -1.0,  1.0, -1.0 }, 1.0, { -1.0,  0.0,  0.0 }, 1.0, 0.0 },
	{ { -1.0, -1.0, -1.0 }, 1.0, { -1.0,  0.0,  0.0 }, 1.0, 1.0 },
	{ { -1.0, -1.0,  1.0 }, 1.0, { -1.0,  0.0,  0.0 }, 0.0, 1.0 },
	{ { -1.0, -1.0, -1.0 }, 1.0, {  0.0, -1.0,  0.0 }, 0.0, 0.0 },
	{ {  1.0, -1.0, -1.0 }, 1.0, {  0.0, -1.0,  0.0 }, 1.0, 0.0 },
	{ {  1.0, -1.0,  1.0 }, 1.0, {  0.0, -1.0,  0.0 }, 1.0, 1.0 },
	{ { -1.0, -1.0,  1.0 }, 1.0, {  0.0, -1.0,  0.0 }, 0.0, 1.0 },
	{ {  1.0, -1.0, -1.0 }, 1.0, {  0.0,  0.0, -1.0 }, 0.0, 0.0 },
	{ { -1.0, -1.0, -1.0 }, 1.0, {  0.0,  0.0, -1.0 }, 1.0, 0.0 },
	{ { -1.0,  1.0, -1.0 }, 1.0, {  0.0,  0.0, -1.0 }, 1.0, 1.0 },
	{ {  1.0,  1.0, -1.0 }, 1.0, {  0.0,  0.0, -1.0 }, 0.0, 1.0 }
};

GLushort cubeElements[] = {
	0,  1,  3,
	1,  2,  3,
	4,  5,  7,  
	5,  6,  7,
	8,  9,  11, 
	9, 10,  11,
	12, 13, 15,
	13, 14, 15,
	16, 17, 19,
	17, 18, 19,
	20, 21, 23,
	21, 22, 23
};

#endif